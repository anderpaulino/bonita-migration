//clean old build files
rootDir.listFiles(new FilenameFilter() {
    @Override
    boolean accept(File file, String s) {
        return s.startsWith("build@")
    }
}).each { GFileUtils.deleteDirectory(it) }

//list available version on filesystem
def availableVersions = new File("../bonita-migration-distrib/src/main/resources/versions").listFiles(new FilenameFilter() {
    @Override
    boolean accept(File file, String s) {
        return !s.endsWith(".jar")
    }
}).collect {
    it.name
}
availableVersions.sort()
//determine path to use for steps
def sourceGlobalVersion = System.getProperty("source.version")
def targetGlobalVersion = System.getProperty("target.version")
def startIndex = -1
def endIndex = -1
for (int i = 0; i < availableVersions.size(); i++) {
    if (availableVersions.get(i).startsWith(sourceGlobalVersion + "-")) {
        startIndex = i
    }
    if (availableVersions.get(i).endsWith("-" + targetGlobalVersion)) {
        endIndex = i
    }
}
if (startIndex == -1 || endIndex == -1) {
    throw new IllegalArgumentException("Migration is unknown : startIndex=" + startIndex + ", endIndex=" + endIndex + ", availableVersions=" +availableVersions)
}

//create a project for each migration step to test
def String[] list = availableVersions.subList(startIndex, endIndex + 1).collect { "build@" + it }
//copy src and lib
def stepSrcDir = new File(rootDir, "src")
def stepLibDir = new File(rootDir, "lib")
list.each {
    def stepDir = new File(rootDir, it)
    copyDirectory(stepSrcDir, new File(stepDir, "src"))
    copyDirectory(stepLibDir, new File(stepDir, "lib"))
    GFileUtils.copyFile(new File(rootDir, "logback.xml"), new File(stepDir, "logback.xml"))
    GFileUtils.copyFile(new File(rootDir, "init-sqlserver.sql"), new File(stepDir, "init-sqlserver.sql"))

}
println "executing steps $list"

//include these steps
include list

def copyDirectory(final File srcDir, final File destDir) throws IOException {
    final File[] srcFiles = srcDir.listFiles();
    if (destDir.exists()) {
        if (!destDir.isDirectory()) {
            throw new IOException("Destination '" + destDir + "' exists but is not a directory");
        }
    } else {
        if (!destDir.mkdirs() && !destDir.isDirectory()) {
            throw new IOException("Destination '" + destDir + "' directory cannot be created");
        }
    }
    for (final File srcFile : srcFiles) {
        final File dstFile = new File(destDir, srcFile.getName());
        if (srcFile.isDirectory()) {
            copyDirectory(srcFile, dstFile);
        } else {
            GFileUtils.copyFile(srcFile, dstFile);
        }
    }
}
